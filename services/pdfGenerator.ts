import { Profile, Medicine, Schedule, DoseStatus } from '../types';

declare const jspdf: any;

interface ReportData {
  profile: Profile;
  medicines: Medicine[];
  schedules: Schedule[];
  startDate: Date;
  endDate: Date;
}

const addImageToDoc = (doc: any, imageData: string, x: number, y: number, w: number, h: number) => {
    try {
        const img = new Image();
        img.src = imageData;
        const format = imageData.split(';')[0].split('/')[1].toUpperCase();
        doc.addImage(img, format, x, y, w, h);
    } catch(e) {
        console.error("Failed to add image to PDF", e);
        doc.text('Image could not be loaded', x, y);
    }
}

export const generatePDFReport = async (data: ReportData): Promise<void> => {
  const { profile, medicines, schedules, startDate, endDate } = data;
  const { jsPDF } = jspdf;
  const doc = new jsPDF();

  doc.setFontSize(20);
  doc.setTextColor(37, 99, 235);
  doc.text('Medicine History Report', 105, 20, { align: 'center' });

  doc.setFontSize(12);
  doc.setTextColor(15, 23, 42);
  doc.text(`Profile: ${profile.name}`, 14, 35);
  doc.text(`Report Period: ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`, 14, 42);
  
  if (profile.picture) {
    addImageToDoc(doc, profile.picture, 160, 28, 35, 35);
  }

  // Corrected compliance calculation logic to match dashboard
  const now = new Date();
  // Filter for schedules within the report that were actually due (i.e., in the past).
  const pastSchedules = schedules.filter(s => new Date(s.scheduledTime) < now);

  const totalDueDoses = pastSchedules.length;
  const takenDoses = pastSchedules.filter(s => s.status === DoseStatus.TAKEN).length;
  const complianceRate = totalDueDoses > 0 ? ((takenDoses / totalDueDoses) * 100).toFixed(1) : 'N/A';
  
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text(`Overall Compliance: ${complianceRate === 'N/A' ? 'N/A' : `${complianceRate}%`}`, 105, 60, { align: 'center' });
  doc.setLineWidth(0.5);
  doc.line(14, 65, 196, 65);

  const medicineMap = new Map(medicines.map(m => [m.id, m]));
  
  const tableBody = schedules
      .sort((a,b) => new Date(a.scheduledTime).getTime() - new Date(b.scheduledTime).getTime())
      .map(s => {
          const scheduled = new Date(s.scheduledTime);
          const medicine = medicineMap.get(s.medicineId);
          // Use snapshotted data with fallback for older records
          const displayName = s.medicineName || medicine?.name || 'N/A';
          const displayDose = s.dose || medicine?.dose || 'N/A';
          return [
              scheduled.toLocaleString(),
              displayName,
              displayDose,
              s.status.charAt(0).toUpperCase() + s.status.slice(1)
          ];
      });

  (doc as any).autoTable({
    startY: 75,
    head: [['Scheduled Time', 'Medicine', 'Dose', 'Status']],
    body: tableBody,
    theme: 'grid',
    headStyles: { fillColor: [20, 184, 166] },
  });


  const pageCount = doc.internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(100, 116, 139);
    doc.text(`Page ${i} of ${pageCount}`, 105, 287, { align: 'center' });
    doc.text(`Generated by Medicine Reminder on ${new Date().toLocaleString()}`, 105, 292, { align: 'center' });
  }
  
  const fileName = `${profile.name.replace(/\s/g, '_')}_Medication_Report_${startDate.toLocaleDateString().replace(/\//g, '-')}.pdf`;

  // To ensure functionality within the Android APK (WebView), we use the native
  // sharing capability provided by `window.aistudio.share`. This is more reliable
  // than a direct web download, which often fails in this environment.
  // A fallback to the standard `doc.save()` is kept for web browser compatibility.
  try {
    if (window.aistudio?.share) {
      // Generate the PDF as a base64 string.
      const pdfDataUri = doc.output('datauristring');
      // The native share function expects the raw base64 data, without the data URI prefix.
      const base64Data = pdfDataUri.substring(pdfDataUri.indexOf(',') + 1);
      
      await window.aistudio.share({
        data: base64Data,
        filename: fileName,
        mimeType: 'application/pdf',
      });
    } else {
      // Fallback for standard web browsers.
      doc.save(fileName);
    }
  } catch (e) {
    console.error("PDF generation/sharing failed:", e);
    alert("Could not save or share the PDF report. An unexpected error occurred.");
  }
};